{"version":3,"file":"static/chunks/app/layout-5bac0ae7e9390f41.js","mappings":"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","sources":["webpack://_N_E/ignored|/home/spielcrypto/tothemoon/to-the-moon-app/node_modules/tweetnacl|crypto","webpack://_N_E/?b48f","webpack://_N_E/./src/config/env.ts","webpack://_N_E/./src/helpers/enums.ts","webpack://_N_E/./src/helpers/utils.ts","webpack://_N_E/./src/services/panora.ts","webpack://_N_E/./src/context/TokenProvider.tsx","webpack://_N_E/./src/app/globals.css","webpack://_N_E/./node_modules/next/font/google/target.css","webpack://_N_E/./node_modules/next/font/google/target.css?bb53"],"sourcesContent":["/* (ignored) */","import(/* webpackMode: \"eager\" */ \"/home/spielcrypto/tothemoon/to-the-moon-app/node_modules/next/font/google/target.css?{\\\"path\\\":\\\"src/app/layout.tsx\\\",\\\"import\\\":\\\"Geist\\\",\\\"arguments\\\":[{\\\"variable\\\":\\\"--font-geist-sans\\\",\\\"subsets\\\":[\\\"latin\\\"]}],\\\"variableName\\\":\\\"geistSans\\\"}\");\n;\nimport(/* webpackMode: \"eager\" */ \"/home/spielcrypto/tothemoon/to-the-moon-app/node_modules/next/font/google/target.css?{\\\"path\\\":\\\"src/app/layout.tsx\\\",\\\"import\\\":\\\"Geist_Mono\\\",\\\"arguments\\\":[{\\\"variable\\\":\\\"--font-geist-mono\\\",\\\"subsets\\\":[\\\"latin\\\"]}],\\\"variableName\\\":\\\"geistMono\\\"}\");\n;\nimport(/* webpackMode: \"eager\" */ \"/home/spielcrypto/tothemoon/to-the-moon-app/src/app/globals.css\");\n;\nimport(/* webpackMode: \"eager\", webpackExports: [\"TokenProvider\"] */ \"/home/spielcrypto/tothemoon/to-the-moon-app/src/context/TokenProvider.tsx\");\n","export const TO_THE_MOON_ADDRESS = process.env\n  .NEXT_PUBLIC_TO_THE_MOON_ADDRESS as string;\nexport const PANORA_API_URL = process.env.NEXT_PUBLIC_PANORA_API_URL as string;\nexport const PANORA_API_KEY = process.env.NEXT_PUBLIC_PANORA_API_KEY as string;\nexport const APTOS_NETWORK = process.env.NEXT_PUBLIC_APTOS_NETWORK as string;\nexport const APTOS_API_KEY = process.env.NEXT_PUBLIC_APTOS_API_KEY as string;\n","export enum ActionType {\n  Withdraw = \"0x1::coin::WithdrawEvent\",\n  Deposit = \"0x1::coin::DepositEvent\",\n}\n","import { Aptos, AptosConfig, Network } from \"@aptos-labs/ts-sdk\";\nimport { APTOS_API_KEY, APTOS_NETWORK } from \"@moon/config/env\";\n\nexport function aptosClient() {\n  const aptos = new Aptos(\n    new AptosConfig({\n      network: APTOS_NETWORK as Network,\n      clientConfig: {\n        API_KEY: APTOS_API_KEY,\n      },\n    })\n  );\n  return aptos;\n}\n","import { PANORA_API_KEY, PANORA_API_URL } from \"@moon/config/env\";\nimport axios from \"axios\";\n\nconst panora = axios.create({\n  baseURL: PANORA_API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    \"X-Api-Key\": PANORA_API_KEY,\n  },\n});\n\nexport default panora;\n","\"use client\";\nimport {\n  convertAmountFromOnChainToHumanReadable,\n  isUserTransactionResponse,\n} from \"@aptos-labs/ts-sdk\";\nimport { truncateAddress } from \"@aptos-labs/wallet-adapter-react\";\nimport { TO_THE_MOON_ADDRESS } from \"@moon/config/env\";\nimport { ActionType } from \"@moon/helpers/enums\";\nimport { IFAActivities, IToken, ITradingInfo } from \"@moon/helpers/interfaces\";\nimport { aptosClient } from \"@moon/helpers/utils\";\nimport panora from \"@moon/services/panora\";\nimport {\n  createContext,\n  ReactNode,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\n\nexport type TokenContextProp = {\n  tokenInfo: IToken;\n  tradingInfo: ITradingInfo[];\n};\n\nconst TokenContext = createContext({} as TokenContextProp);\n\nexport const TokenProvider = ({ children }: { children: ReactNode }) => {\n  const [tokenInfo, setTokenInfo] = useState<IToken>({} as IToken);\n  const [tradingInfo, setTradingInfo] = useState<ITradingInfo[]>([]);\n  const aptos = aptosClient();\n\n  const getPrice = async () => {\n    const response = await panora.get<IToken[]>(\"/prices\", {\n      params: {\n        tokenAddress: TO_THE_MOON_ADDRESS,\n      },\n    });\n\n    const data = response.data?.[0];\n\n    setTokenInfo(data);\n  };\n\n  const getTradingInfo = async () => {\n    const activities = await aptos.queryIndexer<IFAActivities>({\n      query: {\n        query: `query MyQuery {\n          fungible_asset_activities(\n            where: {owner_address: {_eq: \"0x7d4bf74e429bd0a7a4ffe35f7008f3e533c758d088835fcc7f112e469bb1ee56\"}}\n            limit: 20\n            order_by: {transaction_timestamp: desc}\n          ) {\n            amount\n            asset_type\n            transaction_version\n            transaction_timestamp\n            type\n          }\n        }`,\n      },\n    });\n\n    console.log(\"Trading info:\", activities);\n\n    const tradingData = await Promise.all(\n      activities.fungible_asset_activities.map(async (activity) => {\n        const tx = await aptos.getTransactionByVersion({\n          ledgerVersion: activity.transaction_version,\n        });\n\n        if (!isUserTransactionResponse(tx)) return null;\n\n        return {\n          amount: convertAmountFromOnChainToHumanReadable(activity.amount, 8),\n          assetType: activity.asset_type,\n          sender: truncateAddress(tx.sender),\n          createdAt: new Date(activity.transaction_timestamp).toLocaleString(),\n          type: activity.type,\n          from: \"\",\n          assetFrom: \"\",\n          to: \"\",\n          assetTo: \"\",\n        };\n      })\n    );\n\n    const tradingReduced = tradingData.reduce((acc, curr) => {\n      const index = acc.findIndex((a) => a.createdAt === curr?.createdAt);\n\n      if (index === -1) {\n        acc.push(curr as ITradingInfo);\n      } else {\n        if (curr?.type === ActionType.Deposit) {\n          acc[index].from = curr?.amount.toFixed(3) as string;\n          acc[index].assetFrom = curr?.assetType as string;\n          acc[index].to = acc[index].amount.toFixed(3);\n          acc[index].assetTo = acc[index].assetType;\n        } else {\n          acc[index].to = curr?.amount.toFixed(3) as string;\n          acc[index].assetTo = curr?.assetType as string;\n          acc[index].from = acc[index].amount.toFixed(3);\n          acc[index].assetFrom = acc[index].assetType;\n        }\n      }\n\n      return acc;\n    }, [] as ITradingInfo[]);\n\n    setTradingInfo(tradingReduced);\n  };\n\n  useEffect(() => {\n    getPrice();\n    getTradingInfo();\n\n    const interval = setInterval(() => {\n      getPrice();\n      getTradingInfo();\n    }, 1000 * 60 * 10); // Update every 10 minutes\n\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <TokenContext.Provider value={{ tokenInfo, tradingInfo }}>\n      {children}\n    </TokenContext.Provider>\n  );\n};\n\nexport const useTokenInfo = () => {\n  return useContext(TokenContext);\n};\n","// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin\nmodule.exports = {\"style\":{\"fontFamily\":\"'Geist', 'Geist Fallback'\",\"fontStyle\":\"normal\"},\"className\":\"__className_4d318d\",\"variable\":\"__variable_4d318d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"style\":{\"fontFamily\":\"'Geist Mono', 'Geist Mono Fallback'\",\"fontStyle\":\"normal\"},\"className\":\"__className_ea5f4b\",\"variable\":\"__variable_ea5f4b\"};"],"names":["TO_THE_MOON_ADDRESS","process","ActionType","panora","axios","create","baseURL","PANORA_API_URL","headers","PANORA_API_KEY","TokenContext","createContext","TokenProvider","children","tokenInfo","setTokenInfo","useState","tradingInfo","setTradingInfo","aptos","Aptos","AptosConfig","aptosClient","network","APTOS_NETWORK","clientConfig","API_KEY","APTOS_API_KEY","getPrice","response","data","get","params","tokenAddress","getTradingInfo","activities","queryIndexer","query","console","log","tradingData","Promise","tradingReduced","all","fungible_asset_activities","map","activity","tx","getTransactionByVersion","ledgerVersion","transaction_version","isUserTransactionResponse","amount","convertAmountFromOnChainToHumanReadable","assetType","asset_type","sender","truncateAddress","createdAt","Date","transaction_timestamp","toLocaleString","type","from","assetFrom","to","assetTo","reduce","acc","curr","index","findIndex","a","push","Deposit","toFixed","useEffect","interval","setInterval","clearInterval","Provider","value","useContext"],"sourceRoot":"","ignoreList":[0,8,9]}